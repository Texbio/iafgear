import java.text.SimpleDateFormat
import java.util.Date

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.24'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = "${mod_group_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official

    mappings channel: 'official', version: "${minecraft_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // Modrinth Maven
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    // CurseMaven for CurseForge dependencies
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // JEI
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    // JEI fallback
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // Curios
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }

    // BlameJared maven for various mods
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
}

dependencies {
    // Minecraft and Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Annotation processor for mixins if needed
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //maybe learn from this?
//    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
//    // at runtime, use the full JEI jar for Forge
//    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    // Silent Gear - version 3.6.7
    implementation fg.deobf("maven.modrinth:silent-gear:2Chvw4VA")

    // Silent Lib - version 8.0.0 (required by Silent Gear)
    implementation fg.deobf("maven.modrinth:silent-lib:WGt4877n")

    // Citadel - version 2.6.2 (required by Ice and Fire)
//    implementation fg.deobf("maven.modrinth:citadel:oD1qDb1C")
    implementation fg.deobf("curse.maven:citadel-331936:6702068")

    // Ice and Fire Dragons - version 2.1.13-1.20.1-beta-5
//    implementation fg.deobf("maven.modrinth:ice-and-fire-dragons:EzN8KQYF")
    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")

    // JEI (Just Enough Items)
    implementation fg.deobf("curse.maven:jei-238222:7037120")

    // Curios API - version 5.14.1+1.20.1
//    implementation fg.deobf("maven.modrinth:curios:IPQlZkz1")
//    implementation fg.deobf("curse.maven:curios-309927:6418456") // curios-forge-5.14.1+1.20.1.jar

//    implementation fg.deobf("curse.maven:curios-309927:6418456") // curios-forge-5.14.1+1.20.1.jar




    // Testing/Development mods (not required dependencies)
//    // MmmMmmMmmMmm (Target Dummy) - version 1.20-2.0.9
//    runtimeOnly fg.deobf("maven.modrinth:mmmmmmmmmmmm:zAahRq2q")
//
//    // moonlight 1.20-2.16.13-forge
//    runtimeOnly fg.deobf("maven.modrinth:moonlight:FGswLGsg")
//
//    // Jade (WAILA fork) - version 11.13.2+forge
//    runtimeOnly fg.deobf("maven.modrinth:jade:LecuGude")

    // Annotations
    implementation 'org.jetbrains:annotations:23.0.0'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description,
            silentgear_version: silentgear_version,
            iceandfire_version: iceandfire_version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(new Date())
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}